import React from 'react';
import * as THREE from 'three';

const style = {
	backgroundColor: "black",
	position: "absolute",
	width: "100%",
	height: "100%",
  left: 0,
  top: 0,
	overflow: "hidden",
	background: "linear-gradient(#000000, #2b2b2b)"
}

//****** COLORS
const Colors = {
  cloud : 0x2b2b2b,
  grey  : 0x848484,
  black : 0x000000
};

//****** CUSTOMIZABLE VARIABLES
const options = {
  speed           : 0.00001,
  cloudSpeed      : 0.0001,
  cameraPosition  : 100,

  worldRadius     : 600,
  worldLength     : 800
};

const worldOpt = {
  radius: 600,
  length: 800
}

const groundOpt = {
  minAmp : 5,
  maxAmp : 20,
  minSpeed : 0.001,
  maxSpeed : 0.003
}

const cameraOpt = {
  position_x: 0,
  position_y: 100,
  position_z: 200,

  fieldOfView : 50,
  nearPlane   : 0.1,
  farPlane    : 10000
};

class ThreeBackground extends React.Component {

  constructor() {
    super();
    this.createScene = this.createScene.bind(this);
    this.initializeCloud = this.initializeCloud.bind(this);
    this.initializeSky = this.initializeSky.bind(this);
    this.initializeWorld();
    this.initializeCloud();
    this.initializeSky();
    this.World = this.World.bind(this);
    this.Cloud = this.Cloud.bind(this);
    this.Sky = this.Sky.bind(this);
    this.loop = this.loop.bind(this);
  }

  //****** MAIN SCENE
  createScene = () => {
    console.log("** Scene Created!\n");
    const HEIGHT = window.innerHeight;
    const WIDTH = window.innerWidth;

    // Initialize Scene
    this.scene = new THREE.Scene();

    // Initialize Camera
    this.camera = new THREE.PerspectiveCamera(
      cameraOpt.fieldOfView = 50,
      cameraOpt.aspectRatio = WIDTH / HEIGHT,
      cameraOpt.nearPlane = 0.1,
      cameraOpt.farPlane = 100000
    );
    this.scene.fog = new THREE.Fog(0x2b2b2b, 100, 950);
    this.camera.position.x = cameraOpt.position_x;
    this.camera.position.y = cameraOpt.position_y;
    this.camera.position.z = cameraOpt.position_z;

    // Initialize Renderer
    this.renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
    this.renderer.setSize(WIDTH, HEIGHT);

    this.renderer.shadowMap.enabled = true;

    // Add to DOM Container
    const container = document.getElementById('canvas');
    container.appendChild(this.renderer.domElement);
  }

  handleWindowResize = () => {
    const HEIGHT  = window.innerHeight;
    const WIDTH   = window.innerWidth;

    this.renderer.setSize(WIDTH, HEIGHT);
    this.camera.aspect = WIDTH / HEIGHT;

    this.camera.updateProjectionMatrix();
  }

  //****** SCENE LIGHTING
  createLights = () => {
    console.log("** Scene LIGHTS Created!\n");
    // Gradient Lighting
    const hemisphereLight = new THREE.HemisphereLight(0xffffff, 0x000000, 0.5)

    // Ambient Lighting
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);

    // Directional Lighting
    const shadowLight = new THREE.DirectionalLight(0xffffff, 0.7);
    shadowLight.position.set(150, 350, 350);

    shadowLight.castShadow            = true;
    shadowLight.shadow.camera.left    = -400;
    shadowLight.shadow.camera.right   = 400;
    shadowLight.shadow.camera.top     = 400;
    shadowLight.shadow.camera.bottom  = -400;
    shadowLight.shadow.camera.near    = 1;
    shadowLight.shadow.camera.far     = 1000;
    shadowLight.shadow.mapSize.width  = 4096;
    shadowLight.shadow.mapSize.height = 4096;

    // Camera Helper (debugging)
    //var ch = new THREE.CameraHelper(shadowLight.shadow.camera);
    //scene.add(ch);

    // Add lighting to scene
    this.scene.add(hemisphereLight);
    this.scene.add(shadowLight);
    this.scene.add(ambientLight);
  }

  initializeWorld = () => {
    //****** WORLD MODELS
    this.World = function() {
      // Initialize a 3D Model
      var geom = new THREE.CylinderGeometry(worldOpt.radius,worldOpt.radius,worldOpt.length,40,10);
      geom.applyMatrix(new THREE.Matrix4().makeRotationX(-Math.PI/2));
      geom.mergeVertices();
      var len = geom.vertices.length;

      // Add unlevel ground
      this.ground = [];
      for( var i = 0; i < len; i++ ) {
        var v = geom.vertices[i];
        this.ground.push({
          y     : v.y,
          x     : v.x,
          z     : v.z,
          ang   : Math.random()*Math.PI*2,
          amp   : groundOpt.minAmp + Math.random() * (groundOpt.maxAmp-groundOpt.minAmp),
          speed : groundOpt.minSpeed + Math.random() * (groundOpt.maxSpeed-groundOpt.minSpeed)
        });
      };
      // Material
      var mat = new THREE.MeshPhongMaterial({
        color       : Colors.grey,
        transparent : true,
        opacity     : 0.8,
        flatShading : THREE.FlatShading,
      });

      this.mesh = new THREE.Mesh(geom, mat);
      this.mesh.receiveShadow = true;
    }

    console.log("World Initialized!");
    console.log(this.World);

    // Function to move world
    this.World.prototype.moveGround = function (){
      var verts = this.mesh.geometry.vertices;
      var len = verts.length;
      // Move each
      for( var i = 0; i < len; i++ ) {
        var v       = verts[i];
        var vprops  = this.ground[i];

        v.x = vprops.x + Math.cos(vprops.ang) * vprops.amp;
        v.y = vprops.y + Math.sin(vprops.ang) * vprops.amp;
        vprops.ang += vprops.speed*this.deltaTime;

        this.mesh.geometry.verticesNeedUpdate = true;
      }
    }
  }

  initializeCloud = () => {
    // Define Clouds
    this.Cloud = function() {
      this.mesh = new THREE.Object3D();
      var geom  = new THREE.CubeGeometry(20, 20, 20);
      var mat   = new THREE.MeshPhongMaterial({ color: Colors.cloud });

      var numBlocs = 3 + Math.floor(Math.random() * 3);
      for( var i = 0; i < numBlocs; i++ ) {
        var m     = new THREE.Mesh(geom.clone(), mat);
        var scale = 0.1 + Math.random() * 0.9;

        m.position.x = i * 15;
        m.position.y = Math.random() * 10;
        m.position.z = Math.random() * 10;
        m.rotation.z = Math.random() * Math.PI * 2;
        m.rotation.y = Math.random() * Math.PI * 2;
        m.scale.set(scale, scale, scale);

        this.mesh.add(m);

        m.castShadow    = true;
        m.receiveShadow = true;
      }
    }

    console.log("Cloud Initialized!");
    console.log(this.Cloud);

    // Function to rotate clouds
    this.Cloud.prototype.rotate = function(){
      var len = this.mesh.children.length;
      for( var i = 0; i < len; i++ ) {
        var m = this.mesh.children[i];
        m.rotation.z += Math.random() * 0.005 * (i + 1);
        m.rotation.y += Math.random() * 0.002 * (i + 1);
      }
    }
  }

  initializeSky = () => {
    // Define Sky (Adding clouds, particles)
    this.Sky = function() {
      this.mesh = new THREE.Object3D();

      this.numClouds  = 20;
      this.clouds     = [];
      var stepAngle   = Math.PI * 2 / this.numClouds;

      // Add all clouds to sky
      for( var i = 0; i < this.numClouds; i++ ) {
        var newCloud  = new this.Cloud();
        this.clouds.push(newCloud);
        var angle     = stepAngle * i;
        var height    = worldOpt.radius + 150 + Math.random() * 200;
        var scale     = 1 + Math.random() * 2;
        newCloud.mesh.position.y = Math.sin(angle) * height;
        newCloud.mesh.position.x = Math.cos(angle) * height;
        newCloud.mesh.position.z = -300 - Math.random() * 500;
        newCloud.mesh.rotation.z = angle + Math.PI / 2;
        newCloud.mesh.scale.set(scale, scale, scale);
        this.mesh.add(newCloud.mesh);
      }
    }

    console.log("Sky Initialized!");
    console.log(this.Sky);

    // Function to move clouds in the sky
    this.Sky.prototype.moveClouds = function() {
      for( var i = 0; i < this.numClouds; i++ ) {
        var cloud = this.clouds[i];
        cloud.rotate();
      }
      this.mesh.rotation.z += options.cloudSpeed * this.deltaTime;
    }
  }

  createWorld = () => {
    this.world = new this.World();
    this.world.mesh.position.y = -worldOpt.radius;
    this.scene.add(this.world.mesh);
    console.log("** World added to Scene!");
  }

  createSky = () => {
    this.sky = new this.Sky();
    this.sky.mesh.position.y = -worldOpt.radius;
    this.scene.add(this.sky.mesh);
    console.log("** Sky added to Scene!");
  }

  loop = () => {

    // Get "Delta Time"
    this.newTime   = new Date().getTime();
    this.deltaTime = this.newTime - this.oldTime;
    this.oldTime   = this.newTime;

    // Rotate World
    this.world.mesh.rotation.z += options.speed * this.deltaTime;
    if ( this.world.mesh.rotation.z > 2*Math.PI) this.world.mesh.rotation.z -= 2 * Math.PI;

    //this.sky.moveClouds();
    this.world.moveGround();

    this.renderer.render(this.scene, this.camera);
    // requestAnimationFrame(this.loop);
    this.requestID = window.requestAnimationFrame(this.loop);
  }

  componentDidMount() {
    console.log("3D Canvas Unmounted!");

    // Declarations
    this.deltaTime = 0;
    this.newTime   = new Date().getTime();
    this.oldTime   = new Date().getTime();

    //****** LOOPS

    // Initialize all 3D objects
    this.createScene();
    this.createLights();

    //this.initializeWorld();
    console.log("Result: ", new this.World());
    console.log("\n");
    //this.initializeCloud();
    console.log("Result: ", new this.Cloud());
    console.log("\n");
    //this.initializeSky();
    //console.log("Result: ", new this.Sky());
    console.log("\n");

    this.createWorld();
    //this.createSky();

    window.addEventListener('resize', this.handleWindowResize, false);

    this.requestID = window.requestAnimationFrame(this.loop);
    // Start the loop
    console.log("Scene:", this.scene);
    this.loop();
  }

  componentWillUnmount() {
    console.log("3D Canvas Unmounted!");
    window.removeEventListener('resize', this.componentDidMount.handleWindowResize)
    window.cancelAnimationFrame(this.requestID);
  }

  render() {
    return(
      <div id="canvas" style={style}></div>
    );
  }
}

export default ThreeBackground
